[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
authors = [Charles Williams]
pylith_version = [>=4.0, <5.0]
keywords = [Green's functions, 3D, TDefnode]
features = [
    Tetrahedral cells,
    pylith.meshio.MeshIOCubit,
    pylith.problems.TimeDependent,
    pylith.meshio.OutputSolnBoundary,
    pylith.meshio.DataWriterHDF5,
    pylith.bc.DirichletTimeDependent,
    pylith.bc.ZeroDB,
    spatialdata.geocoords.CSGeo
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on some journals to show progress.
[pylithapp.journal.info]
pylithapp = 1
timedependent = 1
solution = 1
meshiocubit = 1
isotropiclinearelasticity = 1
dirichlettimedependent = 1
faultcohesivekin = 1
petscoptions = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
# We use a mesh from CUBIT/Trelis, so we need to change the reader
# from the default (MeshIOAscii) and set the filename.
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOCubit

# Our mesh uses a local transverse Mercator geographic projection. By
# specifying the projection, we can use other georeferenced coordinate
# systems in spatial databases and the code will automatically
# transform coordinates as necessary.
[pylithapp.mesh_generator.reader]
coordsys = spatialdata.geocoords.CSGeo
coordsys.space_dim = 3
coordsys.crs_string = +proj=tmerc +datum=WGS84 +lon_0=102.5 +lat_0=28.0 +k=0.9996 +units=m

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Use the nonlinear solver to verify residual and Jacobian are consistent.
solver = nonlinear

# Set the default quadrature order for all subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
defaults.quadrature_order = 1

[pylithapp.problem.solution.subfields]
displacement.basis_order = 1

[pylithapp.problem]
# solution_observers = [domain, groundsurf]
# solution_observers.groundsurf = pylith.meshio.OutputSolnBoundary

# [pylithapp.problem.solution_observers.domain]
# trigger.num_skip = 99999

# [pylithapp.problem.solution_observers.groundsurf]
# label = face_zpos
# trigger.num_skip = 99999

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
materials = [all_material]

[pylithapp.problem.materials]
all_material.bulk_rheology = pylith.materials.IsotropicLinearElasticity

[pylithapp.problem.materials.all_material]
description = Entire elastic domain
label_value = 1

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# The generic setup is roller boundary conditions on the lateral and
# bottom boundaries. That is, we have zero displacements for the DOF
# normal to the boundary. We can use the default DirichletTimeDependent BC
# with a ZeroDB spatial database to specify zero displacementsfor the
# boundary values.
#
# Array of boundary conditions (defaults to DirichletTimeDependent):
#   bc_xneg (ZeroDB to specify zero x-displacement)
#   bc_xpos (ZeroDB to specify zero x-displacement)
#   bc_yneg (ZeroDB to specify zero y-displacement)
#   bc_ypos (ZeroDB to specify zero y-displacement)
#   bc_zneg (ZeroDB to specify zero z-displacement)
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_zneg]

# The label corresponds to the name of the nodeset in CUBIT.

# -x face
[pylithapp.problem.bc.bc_xneg]
constrained_dof = [0]
label = face_xneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -x

# +x face
[pylithapp.problem.bc.bc_xpos]
constrained_dof = [0]
label = face_xpos
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on +x

# -y face
[pylithapp.problem.bc.bc_yneg]
constrained_dof = [1]
label = face_yneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -y

# +y face
[pylithapp.problem.bc.bc_ypos]
constrained_dof = [1]
label = face_ypos
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on +y

# -z face
[pylithapp.problem.bc.bc_zneg]
constrained_dof = [2]
label = face_zneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -z

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]
ksp_max_it = 500
ksp_monitor = true
log_summary = true


# End of file
