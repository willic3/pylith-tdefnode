#!/usr/bin/env python
"""
This is a script to read Green's function info from DEFNODE and create a
VTK file. This version forms quadrilateral cells.
"""

import os
import glob
import platform

# For now, if we are running Python 2, we will also assume PyLith 2.
PYTHON_MAJOR_VERSION = int(platform.python_version_tuple()[0])

if (PYTHON_MAJOR_VERSION == 2):
    from pyre.applications.Script import Script as Application
else:
    from pythia.pyre.applications.Script import Script as Application

import numpy as np
import scipy.spatial
from pyproj import Transformer
from fortranformat import FortranRecordReader

class PytdefReadDefGf(Application):
    """
    This is a script to read Green's function info from DEFNODE/TDEFNODE
    and create VTK output.
    """

    ## Python object for managing ReadDefGf facilities and properties.
    ##
    ## \b Properties
    ## @li \b defnode_gf_dir Directory containing Defnode GF.
    ## @li \b gf_type Use DEFNODE or TDEFNODE Green's functions.
    ## @li \b defnode_fault_num Fault number for which to read GF.
    ## @li \b vtk_impulse_root Root filename for VTK impulse output.
    ## @li \b vtk_response_root Root filename for VTK response output.
    ## @li \b vtk_response_prefix Prefix given to response output names.
    ## @li \b output_projection Proj4 parameters defining output projection.

    if (PYTHON_MAJOR_VERSION == 2):
        import pyre.inventory as inventory
    else:
        import pythia.pyre.inventory as inventory

    defnodeGfDir = inventory.str("defnode_gf_dir", default="m10b")
    defnodeGfDir.meta['tip'] = "Directory containing Defnode Green's functions."

    gfType = inventory.str("gf_type", default="defnode", validator=inventory.choice(["defnode", "tdefnode"]))
    gfType.meta['tip'] = "Use DEFNODE or TDEFNODE Green's functions."

    defnodeFaultNum = inventory.int("defnode_fault_num", default=1)
    defnodeFaultNum.meta['tip'] = "Fault number for which to read GF."

    vtkImpulseRoot = inventory.str("vtk_impulse_root", default="greensfns_impulse")
    vtkImpulseRoot.meta['tip'] = "Root filename for VTK impulse output."

    vtkResponseRoot = inventory.str("vtk_response_root", default="greensfns_response")
    vtkResponseRoot.meta['tip'] = "Root filename for VTK response output."

    vtkResponsePrefix = inventory.str("vtk_response_prefix", default="tdef_")
    vtkResponsePrefix.meta['tip'] = "Prefix given to response output names."

    outputProjection = inventory.str("output_projection",
                                     default="+proj=tmerc +lon_0=175.45 +lat_0=-40.825 +ellps=WGS84 +datum=WGS84 +k=0.9996 +towgs84=0.0,0.0,0.0")
    outputProjection.meta['tip'] = "Proj4 parameters defining output projection."
                                    
    
    # PUBLIC METHODS /////////////////////////////////////////////////////

    def __init__(self, name="pytdef_read_def_gf"):
        Application.__init__(self, name)
        self.numImpulses = 0
        self.numGpsFiles = 0
        self.numInsarFiles = 0
        self.numUpFiles = 0
        self.numGpsResponses = 0
        self.numInsarResponses = 0
        self.numUpResponses = 0
        self.numAsNodes = 0
        self.numDdNodes = 0
        self.GpsFiles = []
        self.InsarFiles = []
        self.UpFiles = []
        self.faultCoords = None
        self.gpsResponseCoordsGeog = None
        self.insarResponseCoordsGeog = None
        self.upResponseCoordsGeog = None
        self.gpsResponseCoords = None
        self.insarResponseCoords = None
        self.upResponseCoords = None
        self.defGpsSitesUse = []
        self.defInsarSitesUse = []
        self.defUpSitesUse = []

        self.responseE = None
        self.responseN = None

        self.projWGS84 = "+proj=lonlat +ellps=WGS84 +datum=WGS84 +towgs84=0.0,0.0,0.0"

        return


    def main(self):
        self._getFileLists()
        self._getSiteLocations()
        self._readDefnodeGf()
        self._writeImpulses()

        return
                                    

    # PRIVATE METHODS /////////////////////////////////////////////////////

    def _configure(self):
        """
        Setup members using inventory.
        """
        Application._configure(self)

        gfHeadFmt = "(a1,3i4,i5,3f12.5,2f8.2,2i5,a5, 1x, a12, d14.7, f10.4)"
        gfGpsFmt = "(a1, 2f10.4, 1x, (4d20.13))"
        gfInsarFmt = "(a1, 2f10.4, 1x, (6d20.13))"
        gfUpFmt = "(a1,2f10.4,(2d20.13), 1x, a8)"

        if (self.gfType == 'tdefnode'):
            gfGpsFmt = "(a1, 2f10.4, 1x, (6d20.13))"

        self.gfHeadFmt = FortranRecordReader(gfHeadFmt)
        self.gfGpsFmt = FortranRecordReader(gfGpsFmt)
        self.gfInsarFmt = FortranRecordReader(gfInsarFmt)
        self.gfUpFmt = FortranRecordReader(gfUpFmt)

        pathName = os.path.dirname(self.vtkImpulseRoot)
        outputDir = self._checkDir(pathName)
        pathName = os.path.dirname(self.vtkResponseRoot)
        outputDir = self._checkDir(pathName)

        self.transWGS84ToOutput = Transformer.from_crs(self.projWGS84, self.outputProjection, always_xy=True)

        return


    def _checkDir(self, subDir):
        """
        Function to see if directory exists and create it if necessary.
        """
        if os.path.isabs(subDir):
            newDir = subDir
        else:
            newDir = os.path.join(os.getcwd(), subDir)

        testDir = os.path.isdir(newDir)
        testFile = os.path.isfile(newDir)

        if (testDir == False):
            if (testFile == True):
                msg = "Subdirectory exists as a file."
                raise ValueError(msg)
            else:
                os.makedirs(newDir)

        return newDir


    def _getHeaderInfo(self, gfType):
        """
        Function to extract info from Defnode/TDefnode file headers.
        """
        files = self.GpsFiles
        if (gfType == 'insar'):
            files = self.InsarFiles
        if (gfType == 'up'):
            files = self.UpFiles

        for fileNum in range(len(files)):
            f = open(files[fileNum], 'r')
            line = f.readline()
            (pref, kf, ix, iz, numSites, lon, lat, depth, gfX, gfW, ish, nlay, defVers, date, xMom, gpsNear) = self.gfHeadFmt.read(line)
            self.numAsNodes = max(self.numAsNodes, ix)
            self.numDdNodes = max(self.numDdNodes, iz)
            f.close()

        return


    def _getFileLists(self):
        """
        Function to get lists of GPS, InSAR, and Up files.
        """

        print("Getting lists of Green's functions:")

        totalGfPath = os.path.normpath(os.path.join(os.getcwd(), self.defnodeGfDir))
        faultString = 'gf' + repr(self.defnodeFaultNum).rjust(3, '0')
        searchGps = os.path.join(totalGfPath, faultString + '*g')
        self.GpsFiles = glob.glob(searchGps)
        self.GpsFiles.sort()
        self.numGpsFiles = len(self.GpsFiles)
        if (self.numGpsFiles != 0):
            self.numImpulses = self.numGpsFiles
            self._getHeaderInfo('gps')

        if (self.gfType == 'tdefnode'):
            searchInsar = os.path.join(totalGfPath, faultString + '*i')
            self.InsarFiles = glob.glob(searchInsar)
            self.InsarFiles.sort()
            self.numInsarFiles = len(self.InsarFiles)
            if (self.numInsarFiles != 0 and self.numGpsFiles != 0):
                if (self.numInsarFiles != self.numImpulses):
                    msg = "Number of GF mismatch for GPS and InSAR files."
                    raise ValueError(msg)
            if (self.numInsarFiles != 0):
                self.numImpulses = self.numInsarFiles
                self._getHeaderInfo('insar')

        if (self.gfType == 'defnode'):
            searchUp = os.path.join(totalGfPath, faultString + '*u')
            self.UpFiles = glob.glob(searchUp)
            self.UpFiles.sort()
            self.numUpFiles = len(self.UpFiles)
            if (self.numUpFiles != 0 and self.numGpsFiles != 0):
                if (self.numUpFiles != self.numImpulses):
                    msg = "Number of GF mismatch for GPS and Up files."
                    raise ValueError(msg)

            if (self.numUpFiles != 0):
                self.numImpulses = self.numUpFiles
            if (self.numGpsFiles == 0):
                self._getHeaderInfo('up')

        return
  
    
    def _matchCoords(self, lon, lat, refCoordTree):
        """
        Match lon/lat coords from file to reference coordinates.
        """

        eps = 0.001
        coordsFind = np.column_stack((lon, lat))
        coordInds = refCoordTree.query_ball_point(coordsFind, eps)
        checkDuplicate = np.array([len(i)>1 for i in coordInds])
        if (np.any(checkDuplicate)):
            msg = 'More than one matching site coordinate found.'
            raise ValueError(msg)
        # matchInds = np.array([i[0] if len(i) > 0 for i in coordInds])
        # matchInds = np.array([i[0] if len(i) > 0 else -1 for i in coordInds])
        matchInds = np.array([i[0] for i in coordInds])

        return matchInds


    def _readUpFile(self, fileNum):
        """
        Function to read a Defnode Up GF file.
        """

        outFile = self.vtkResponseRoot + '_up_r' + repr(fileNum).rjust(4, '0') + ".vtk"
        o = open(outFile, 'w')
        i = open(self.UpFiles[fileNum], 'r')
        lines = i.readlines()

        (pref, kf, ix, iz, numSites, lon, lat, depth, gfX, gfW, ish, nlay, defVers, date, xMom, gpsNear) = self.gfHeadFmt.read(lines[0])
        self.numAsNodes = max(self.numAsNodes, ix)
        self.numDdNodes = max(self.numDdNodes, iz)
        elev = -1000.0 * depth
        coords = [lon, lat, elev]

        lonR = np.zeros(numSites, dtype=np.float64)
        latR = np.zeros(numSites, dtype=np.float64)
        elevR = np.zeros(numSites, dtype=np.float64)
        zRespE = np.zeros(numSites, dtype=np.float64)
        zRespN = np.zeros(numSites, dtype=np.float64)

        # Loop over lines in file.
        for lineNum in range(1, len(lines)):
            respNum = lineNum - 1
            (pref, lonR[respNum], latR[respNum], zRespE[respNum], zRespN[respNum], stn) = self.gfUpFmt.read(lines[lineNum])

        i.close()

        coordInds = self._matchCoords(lonR, latr, self.upResponseTree)
        zRespEOut = np.zeros(self.numUpResponses, dtype=np.float64)
        zRespNOut = np.zeros(self.numUpResponses, dtype=np.float64)
        zRespEOut[coordInds] = zRespE
        zRespNOut[coordInds] = zRespN
      
        vtkHead = "# vtk DataFile Version 2.0\n" + \
            "Response for Defnode Up GF\n" + \
            "ASCII\n" + \
            "DATASET POLYDATA\n" + \
            "POINTS %d double\n" % self.numUpResponses

        o.write(vtkHead)
        np.savetxt(o, self.upResponseCoords)

        responseNameE = self.vtkResponsePrefix + "z_response_e"
        responseNameN = self.vtkResponsePrefix + "z_response_n"
        vtkHead2 = "POINT_DATA %d\n" % numSites
        vtkHead2a = "SCALARS %s float 1\nLOOKUP_TABLE default\n" % responseNameE
        o.write(vtkHead2)
        o.write(vtkHead2a)
        np.savetxt(o, zRespEOut)

        vtkHead3 = "SCALARS %s float 1\nLOOKUP_TABLE default\n" % responseNameN
        o.write(vtkHead3)
        np.savetxt(o, zRespNOut)

        o.close()
        
        return coords
  

    def _readTDefGf(self, gfFile, coordsGeog):
        """
        Function to read TDEFNODE Green's function file.
        """
        epsilon = 1.0e-5
        coordsGeogCurrent = None
        if (coordsGeog is not None):
            coordsGeogCurrent = coordsGeog.copy()
        f = open(gfFile, 'r')
        fLines = f.readlines()
        numSites = len(fLines) - 1
        gfFortran = '(A1, 2f10.4, 1x, (6d20.13))'
        gfFmt = FortranRecordReader(gfFortran)
        gfCoordsGeog = np.zeros((numSites, 2), dtype=np.float64)
        pointNum = 0

        for lineNum in range(1, numSites + 1):
            (type, gfCoordsGeog[pointNum,0], gfCoordsGeog[pointNum,1], gf1, gf2, gf3, gf4, gf5, gf6) = gfFmt.read(fLines[lineNum])
            if (coordsGeogCurrent is not None):
                diff = coordsGeogCurrent - gfCoordsGeog[pointNum,:]
                norm = np.linalg.norm(diff, axis=1)
                indMin = np.argmin(norm)
                if (norm[indMin] > epsilon):
                    coordsGeogCurrent = np.append(coordsGeogCurrent, gfCoordsGeog[pointNum,:].reshape(1,2), axis=0)
            else:
                coordsGeogCurrent = gfCoordsGeog[pointNum,:].reshape(1,2)
            pointNum += 1

        (x, y) = self.transWGS84ToOutput.transform(coordsGeogCurrent[:,0], coordsGeogCurrent[:,1])
        coordsCartCurrent = np.column_stack((x, y))
        numTotalSites = coordsGeogCurrent.shape[0]

        return (numTotalSites, coordsGeogCurrent, coordsCartCurrent)

    
    def _readDefGf(self, gfFile, gfType, coordsGeog):
        """
        Function to read DEFNODE Green's function file.
        """
        epsilon = 1.0e-5
        coordsGeogCurrent = None
        if (coordsGeog is not None):
            coordsGeogCurrent = coordsGeog.copy()
        f = open(gfFile, 'r')
        fLines = f.readlines()
        numSites = len(fLines) - 1
        gfFortran = '(A1, 2f10.4, 1x, (4d20.13))'
        if (gfType == 'u'):
            gfFortran = '(A1, 2f10.4, (2d20.13), 1x, a8)'
        gfFmt = FortranRecordReader(gfFortran)
        gfCoordsGeog = np.zeros((numSites, 2), dtype=np.float64)
        sites = []
        pointNum = 0

        for lineNum in range(1, numSites + 1):
            if (gfType == 'g'):
                (type, gfCoordsGeog[pointNum,0], gfCoordsGeog[pointNum,1],
                 gf1, gf2, gf3, gf4) = gfFmt.read(fLines[lineNum])
            else:
                (type, gfCoordsGeog[pointNum,0], gfCoordsGeog[pointNum,1], gf1, gf2, site) = gfFmt.read(fLines[lineNum])
                sites.append(site)
            if (coordsGeogCurrent is not None):
                diff = coordsGeogCurrent - gfCoordsGeog[pointNum,:]
                norm = np.linalg.norm(diff, axis=1)
                indMin = np.argmin(norm)
                if (norm[indMin] > epsilon):
                    coordsGeogCurrent = np.append(coordsGeogCurrent, gfCoordsGeog[pointNum,:].reshape(1,2), axis=0)
            else:
                coordsGeogCurrent = gfCoordsGeog[pointNum,:].reshape(1,2)
            pointNum += 1

        (x, y) = self.transWGS84ToOutput.transform(coordsGeogCurrent[:,0], coordsGeogCurrent[:,1])
        coordsCartCurrent = np.column_stack((x, y))
        numTotalSites = coordsGeogCurrent.shape[0]

        if (gfType == 'g'):
            return (numTotalSites, coordsGeogCurrent, coordsCartCurrent)
        else:
            return (numTotalSites, coordsGeogCurrent, coordsCartCurrent, sites)

    
    def _readGfFile(self, fileNum, gfType):
        """
        Function to read a Defnode/TDefnode GF file.
        """

        responseNameE = self.vtkResponsePrefix + "response_e"
        responseNameN = self.vtkResponsePrefix + "response_n"
        responseNameT = self.vtkResponsePrefix + "response_total"
        outFile = self.vtkResponseRoot + '_gps_r' + repr(fileNum).rjust(4, '0') + ".vtk"
        vtkInfoLine = "Response for TDefnode GPS GF\n"
        files = self.GpsFiles
        refCoords = self.gpsResponseCoordsGeog
        refCoordTree = self.gpsResponseTree
        outCoords = self.gpsResponseCoords
        numResponses = self.numGpsResponses
        if (gfType == 'insar'):
            outFile = self.vtkResponseRoot + '_insar_r' + repr(fileNum).rjust(4, '0') + ".vtk"
            vtkInfoLine = "Response for TDefnode InSAR GF\n"
            files = self.InsarFiles
            refCoords = self.insarResponseCoordsGeog
            refCoordTree = self.insarResponseTree
            outCoords = self.insarResponseCoords
            numResponses = self.numInsarResponses

        if (self.gfType == 'defnode'):
            vtkInfoLine = "Response for Defnode GPS GF\n"

        o = open(outFile, 'w')

        i = open(files[fileNum], 'r')
        lines = i.readlines()

        (pref, kf, ix, iz, numSites, lon, lat, depth, gfX, gfW, ish, nlay, defVers, date, xMom, gpsNear) = self.gfHeadFmt.read(lines[0])
        self.numAsNodes = max(self.numAsNodes, ix)
        self.numDdNodes = max(self.numDdNodes, iz)
        elev = -1000.0 * depth
        coords = [lon, lat, elev]

        lonR = np.zeros(numSites, dtype=np.float64)
        latR = np.zeros(numSites, dtype=np.float64)
        elevR = np.zeros(numSites, dtype=np.float64)
        xRespE = np.zeros(numSites, dtype=np.float64)
        yRespE = np.zeros(numSites, dtype=np.float64)
        zRespE = np.zeros(numSites, dtype=np.float64)
        xRespN = np.zeros(numSites, dtype=np.float64)
        yRespN = np.zeros(numSites, dtype=np.float64)
        zRespN = np.zeros(numSites, dtype=np.float64)

        # Loop over lines in file.

        for lineNum in range(1, len(lines)):
            respNum = lineNum - 1
            if (self.gfType == 'defnode'):
                (pref, lonR[respNum], latR[respNum], xRespE[respNum], yRespE[respNum],
                 xRespN[respNum], yRespN[respNum]) = self.gfGpsFmt.read(lines[lineNum])
            else:
                (pref, lonR[respNum], latR[respNum], xRespE[respNum], xRespN[respNum], yRespE[respNum], yRespN[respNum],
                 zRespE[respNum], zRespN[respNum]) = self.gfGpsFmt.read(lines[lineNum])

        i.close()
        coordInds = self._matchCoords(lonR, latR, refCoordTree)
        xRespEOut = np.zeros(numResponses, dtype=np.float64)
        yRespEOut = np.zeros(numResponses, dtype=np.float64)
        zRespEOut = np.zeros(numResponses, dtype=np.float64)
        xRespNOut = np.zeros(numResponses, dtype=np.float64)
        yRespNOut = np.zeros(numResponses, dtype=np.float64)
        zRespNOut = np.zeros(numResponses, dtype=np.float64)
        xRespEOut[coordInds] = xRespE
        yRespEOut[coordInds] = yRespE
        zRespEOut[coordInds] = zRespE
        xRespNOut[coordInds] = xRespN
        yRespNOut[coordInds] = yRespN
        zRespNOut[coordInds] = zRespN
      
        vtkHead = "# vtk DataFile Version 2.0\n" + \
            vtkInfoLine + \
            "ASCII\n" + \
            "DATASET POLYDATA\n" + \
            "POINTS %d double\n" % numResponses

        o.write(vtkHead)
        np.savetxt(o, outCoords)

        vtkHead2 = "POINT_DATA %d\n" % numResponses
        vtkHead2a = "VECTORS %s double\n" % responseNameE
        o.write(vtkHead2)
        o.write(vtkHead2a)
        responseE = np.column_stack((xRespEOut, yRespEOut, zRespEOut))
        np.savetxt(o, responseE)

        vtkHead3 = "VECTORS %s double\n" % responseNameN
        o.write(vtkHead3)
        responseN = np.column_stack((xRespNOut, yRespNOut, zRespNOut))
        np.savetxt(o, responseN)

        vtkHead4 = "VECTORS %s double\n" % responseNameT
        o.write(vtkHead4)
        totResponse = responseE + responseN
        np.savetxt(o, totResponse)

        o.close()

        return coords


    def _getSiteLocations(self):
        """
        Loop through all GF files and get number of unique site locations.
        """
        print("Finding unique site locations:")
        numDefNodes = max(self.numGpsFiles, self.numInsarFiles, self.numUpFiles)

        # Loop over files.
        for nodeNum in range(numDefNodes):
            if (self.gfType == 'defnode'):
                if (self.numGpsFiles != 0):
                    (self.numGpsResponses, self.gpsResponseCoordsGeog, self.gpsResponseCoords) = \
                        self._readDefGf(self.GpsFiles[nodeNum], 'g', self.gpsResponseCoordsGeog)
                if (self.numUpFiles != 0):
                    (self.numUpResponses, self.upResponseCoordsGeog, self.upResponseCoords) = \
                        self._readDefGf(self.UpFiles[nodeNum], 'g', self.upResponseCoordsGeog)
            else:
                if (self.numGpsFiles != 0):
                    (self.numGpsResponses, self.gpsResponseCoordsGeog, self.gpsResponseCoords) = \
                        self._readTDefGf(self.GpsFiles[nodeNum], self.gpsResponseCoordsGeog)
                if (self.numInsarFiles != 0):
                    (self.numInsarResponses, self.insarResponseCoordsGeog, self.insarResponseCoords) = \
                        self._readTDefGf(self.InsarFiles[nodeNum], self.insarResponseCoordsGeog)

        # Sort sites by lon, then lat.
        if (self.numGpsFiles != 0):
            inds = np.lexsort((self.gpsResponseCoordsGeog[:,1], self.gpsResponseCoordsGeog[:,0]))
            self.gpsResponseCoordsGeog = self.gpsResponseCoordsGeog[inds,:]
            self.gpsResponseCoords = self.gpsResponseCoords[inds,:]
            zeros = np.zeros((self.numGpsResponses,1), dtype=np.float64)
            self.gpsResponseCoords = np.hstack((self.gpsResponseCoords, zeros))
            self.gpsResponseTree = scipy.spatial.cKDTree(self.gpsResponseCoordsGeog)
        if (self.numUpFiles != 0):
            inds = np.lexsort((self.upResponseCoordsGeog[:,1], self.upResponseCoordsGeog[:,0]))
            self.upResponseCoordsGeog = self.upResponseCoordsGeog[inds,:]
            self.upResponseCoords = self.upResponseCoords[inds,:]
            zeros = np.zeros((self.numUpResponses,1), dtype=np.float64)
            self.upResponseCoords = np.hstack((self.upResponseCoords, zeros))
            self.upResponseTree = scipy.spatial.cKDTree(self.upResponseCoordsGeog)
        if (self.numInsarFiles != 0):
            inds = np.lexsort((self.insarResponseCoordsGeog[:,1], self.insarResponseCoordsGeog[:,0]))
            self.insarResponseCoordsGeog = self.insarResponseCoordsGeog[inds,:]
            self.insarResponseCoords = self.insarResponseCoords[inds,:]
            zeros = np.zeros((self.numInsarResponses,1), dtype=np.float64)
            self.insarResponseCoords = np.hstack((self.insarResponseCoords, zeros))
            self.insarResponseTree = scipy.spatial.cKDTree(self.insarResponseCoordsGeog)

        return


    def _readDefnodeGf(self):
        """
        Function to read Defnode Green's function files.
        """

        print("Reading Defnode Green's function files:")

        impulseGeogCoords = []
        printIncr = 10
    
        # Loop over GPS files.
        for fileNum in range(self.numGpsFiles):
            if (fileNum % printIncr == 0):
                print("  Reading GPS file number:  %d" % fileNum)
            gpsCoords = self._readGfFile(fileNum, 'gps')
            impulseGeogCoords.append(gpsCoords)

        if (self.numGpsFiles != 0):
            impulseGeogArray = np.array(impulseGeogCoords)
            self.faultCoords = np.zeros((self.numImpulses, 3), dtype=np.float64)
            lon = impulseGeogArray[:,0]
            lat = impulseGeogArray[:,1]
            elev = impulseGeogArray[:,2]
            (self.faultCoords[:,0], self.faultCoords[:,1], self.faultCoords[:,2]) = \
              self.transWGS84ToOutput.transform(lon, lat, elev)
    
        # Loop over InSAR files.
        impulseGeogCoords2 = []
        for fileNum in range(self.numInsarFiles):
            if (fileNum % printIncr == 0):
                print("  Reading InSAR file number:  %d" % fileNum)
            insarCoords = self._readGfFile(fileNum, 'insar')
            impulseGeogCoords2.append(insarCoords)

        if (self.numGpsFiles == 0 and self.numInsarFiles != 0):
            impulseGeogArray = np.array(impulseGeogCoords2)
            self.faultCoords = np.zeros((self.numImpulses, 3), dtype=np.float64)
            lon = impulseGeogArray[:,0]
            lat = impulseGeogArray[:,1]
            elev = impulseGeogArray[:,2]
            (self.faultCoords[:,0], self.faultCoords[:,1], self.faultCoords[:,2]) = self.transWGS84ToOutput.transform(lon, lat, elev)

        if (self.gfType == 'defnode'):
            impulseGeogCoords3 = []
    
            # Loop over Up files.
            for fileNum in range(self.numUpFiles):
                if (fileNum % printIncr == 0):
                    print("  Reading Uplift file number:  %d" % fileNum)
                upCoords = self._readUpFile(fileNum)
                impulseGeogCoords3.append(upCoords)

            if (self.numGpsFiles == 0):
                impulseGeogArray = np.array(impulseGeogCoords3)
                self.faultCoords = np.zeros((self.numImpulses, 3), dtype=np.float64)
                lon = impulseGeogArray[:,0]
                lat = impulseGeogArray[:,1]
                elev = impulseGeogArray[:,2]
                (self.faultCoords[:,0], self.faultCoords[:,1], self.faultCoords[:,2]) = self.transWGS84ToOutput.transform(lon, lat, elev)

        return
      
    
    def _writeImpulses(self):
        """
        Function to write impulse information.
        """

        print("Writing impulse VTK files:")

        # VTK headers.
        headerTop = "# vtk DataFile Version 2.0\n" + \
            "Greens function impulse information from DEFNODE/TDEFNODE\n" + \
            "ASCII\n" + \
            "DATASET UNSTRUCTURED_GRID\n"
        headerTotal = headerTop + "POINTS " + repr(self.numImpulses) + " double\n"
        slip = np.zeros(self.numImpulses, dtype=np.float64)
        slipHead = "POINT_DATA %d\n" % self.numImpulses
        slipHeadTot = slipHead + "SCALARS fault_slip double 1\n" + "LOOKUP_TABLE default\n"

        # Determine connectivity.
        numCells = (self.numAsNodes - 1) * (self.numDdNodes - 1)
        numCellEntries = 5 * numCells
        headConnect = "CELLS %d %d\n" % (numCells, numCellEntries)
        connect = np.zeros((numCells, 5), dtype=np.int32)
        connect[:,0] = 4
        headCellType = "CELL_TYPES %d\n" % numCells
        cellType = 9 * np.ones(numCells, dtype=np.int32)
        intFmt = "%d"

        cellNum = 0
        for strikeCell in range(self.numAsNodes - 1):
            for dipCell in range(self.numDdNodes - 1):
                v1 = dipCell + strikeCell * self.numDdNodes
                v2 = v1 + 1
                v3 = v2 + self.numDdNodes
                v4 = v3 - 1
                connect[cellNum,1] = v1
                connect[cellNum,2] = v2
                connect[cellNum,3] = v3
                connect[cellNum,4] = v4
                cellNum += 1
    

        # Slip array.
        headSlip = "POINT_DATA " + repr(self.numImpulses) + "\n" + \
            "SCALARS fault_slip double 1\n" + \
            "LOOKUP_TABLE default\n"
        slip = np.zeros(self.numImpulses, dtype=np.float64)

        printIncr = 10

        # Loop over impulses, writing a separate file for each one.
        for impulseNum in range(self.numImpulses):
            if (impulseNum % printIncr == 0):
                print("  Writing impulse file number:  %d" % impulseNum)
            slip[impulseNum] = 1.0
            if (impulseNum > 0):
                slip[impulseNum - 1] = 0.0
            fileName = self.vtkImpulseRoot + '_i' + repr(impulseNum).rjust(4, '0') + ".vtk"
            o = open(fileName, 'w')

            o.write(headerTotal)
            np.savetxt(o, self.faultCoords)
            o.write(headConnect)
            np.savetxt(o, connect, fmt=intFmt)
            o.write(headCellType)
            np.savetxt(o,cellType, fmt=intFmt)
            o.write(headSlip)
            np.savetxt(o, slip)
            o.close()

        return

# ----------------------------------------------------------------------
if __name__ == '__main__':
    app = PytdefReadDefGf()
    app.run()

# End of file
