#!/usr/bin/env python
#
# ----------------------------------------------------------------------
#
# Charles A. Williams, GNS Science
#
# ----------------------------------------------------------------------
#

## @file pytdef_get_tdef_moment

## @brief Python application to read TDefnode fault info and compute associated shear modulus.

import platform

# For now, if we are running Python 2, we will also assume PyLith 2.
PYTHON_MAJOR_VERSION = int(platform.python_version_tuple()[0])

if (PYTHON_MAJOR_VERSION == 2):
    from pyre.applications.Script import Script as Application
else:
    from pythia.pyre.applications.Script import Script as Application

import numpy as np
import scipy.spatial


class PytdefGetTdefMoment(Application):
    """
    Python application to read TDefnode fault info and compute associated shear modulus.
    """
  
    ## \b Properties
    ## @li \b tdef_flt_info_file Name of TDefnode fault attribute file.
    ## @li \b fault_normal_dist Distance to project on either side of fault to get properties.
    ## @li \b tdef_flt_info_output_file Name of modified fault attribute file to create.
    ## @li \b vtk_point_output_file Name of VTK file with output at patch centroids.
    ## @li \b vtk_patch_output_file Name of VTK file with output at patch nodes.

    ## \b Facilities
    ## @li \b db_velocity Spatial database for seismic velocity.
    ## @li \b coordsys_tdefnode Coordinate system associated with TDefnode output.
    ## @li \b coordsys_local Coordinate system used for local coordinate calculations.

    if (PYTHON_MAJOR_VERSION == 2):
        import pyre.inventory as inventory
    else:
        import pythia.pyre.inventory as inventory


    tdefFltInfoFile = inventory.str("tdef_flt_info_file", default="mod_flt_001_atr.gmt")
    tdefFltInfoFile.meta['tip'] = "Name of TDefnode fault attribute file."

    faultNormalDist = inventory.float("fault_normal_dist", default=100.0)
    faultNormalDist.meta['tip'] = "Name of modified TDefnode fault attribute file to create."

    tdefFltInfoOutputFile = inventory.str("tdef_flt_info_output_file", default="mod_flt_001_shearmod_atr.gmt")
    tdefFltInfoOutputFile.meta['tip'] = "Name of modified TDefnode fault attribute file to create."

    vtkPointOutputFile = inventory.str("vtk_point_output_file", default="mod_flt_001_shearmod_point_atr.vtk")
    vtkPointOutputFile.meta['tip'] = "Name of VTK file with output at patch centroids."

    vtkPatchOutputFile = inventory.str("vtk_patch_output_file", default="mod_flt_001_shearmod_patch_atr.vtk")
    vtkPatchOutputFile.meta['tip'] = "Name of VTK file with output at patch nodes."

    from spatialdata.spatialdb.SimpleGridDB import SimpleGridDB
    dbVelocity = inventory.facility("db_velocity", family="spatial_database", factory=SimpleGridDB)
    dbVelocity.meta['tip'] = "Spatial database for seismic velocity."

    from spatialdata.geocoords.CSGeo import CSGeo
    if (PYTHON_MAJOR_VERSION == 2):
        from spatialdata.geocoords.CSGeoProj import CSGeoProj
        coordsysTDefnode = inventory.facility("coordsys_tdefnode", family="coordsys", factory=CSGeoProj)
        coordsysTDefnode.meta['tip'] = "Coordinate system associated with TDefnode output."

        coordsysLocal = inventory.facility("coordsys_local", family="coordsys", factory=CSGeoProj)
        coordsysLocal.meta['tip'] = "Coordinate system used for local coordinate calculations."
    else:
        from spatialdata.geocoords.CSGeoLocal import CSGeoLocal
        coordsysTDefnode = inventory.facility("coordsys_tdefnode", family="coordsys", factory=CSGeo)
        coordsysTDefnode.meta['tip'] = "Coordinate system associated with TDefnode output."

        coordsysLocal = inventory.facility("coordsys_local", family="coordsys", factory=CSGeo)
        coordsysLocal.meta['tip'] = "Coordinate system used for local coordinate calculations."


    # PUBLIC METHODS /////////////////////////////////////////////////////

    def __init__(self, name="pytdef_get_tdef_moment"):
        Application.__init__(self, name)

        return


    def main(self):
        self._getMoment()
        return


    # PRIVATE METHODS ////////////////////////////////////////////////////

    def _configure(self):
        """
        Setup members using inventory.
        """
        Application._configure(self)

        return


    def _getMoment(self):
        """
        Open output file from TDefnode, compute effective shear modulus on either side of fault,
        and output modified TDefnode file.
        """

        i = open(self.tdefFltInfoFile, 'r')
        w = open(self.tdefFltInfoOutputFile, 'w')

        lines = i.readlines()
        numLines = len(lines)
        numPatches = numLines // 5
        checkLines = numLines % 5
        if (checkLines != 0):
            msg = "Number of lines is not divisible by 5."
            raise ValueError(msg)

        lineStart = 0
        lineEnd = lineStart + 4

        # Loop over patches to get sample coordinates.
        coordsPos = np.zeros((numPatches, 3), dtype=np.float64)
        coordsNeg = np.zeros((numPatches, 3), dtype=np.float64)
        cellCenters = np.zeros((numPatches, 3), dtype=np.float64)
        vertCoords = np.zeros((numPatches, 4, 3), dtype=np.float64)
        vertCoordsGeog = np.zeros((numPatches, 4, 3), dtype=np.float64)
        faultNum = np.zeros(numPatches, dtype=np.int32)
        if (PYTHON_MAJOR_VERSION == 2):
            csLocal = self.coordsysLocal
            csTDefnode = self.coordsysTDefnode
            csLocal._configure()
            csLocal.initialize()
            csTDefnode._configure()
            csTDefnode.initialize()
        else:
            csLocal = self.coordsysLocal
            csTDefnode = self.coordsysTDefnode

        for patchNum in range(numPatches):
            lineStart = patchNum*5
            lineEnd = lineStart + 5
            (faultNum[patchNum], vertCoords[patchNum,:,:],
             cellCenters[patchNum,:], coordsPos[patchNum,:], coordsNeg[patchNum,:]) = self._getSampleCoords(lines[lineStart:lineEnd], csLocal, csTDefnode)

        # Get coordinates and connectivity for fault mesh.
        (vertCoordsUnique, cellConnect) = self._getConnectivity(vertCoords, numPatches)

        # Query spatial database to get Vs and density.
        dataPos = np.zeros((numPatches, 2), dtype=np.float64)
        dataNeg = np.zeros((numPatches, 2), dtype=np.float64)
        data = np.zeros((numPatches, 3), dtype=np.float64)
        err = np.zeros((numPatches,), dtype=np.int32)

        db = self.dbVelocity
        db.open()
        if (PYTHON_MAJOR_VERSION == 2):
            db.queryVals(["density", "vs"])
        else:
            db.setQueryValues(["density", "vs"])
        db.multiquery(dataPos, err, coordsPos, csLocal)
        db.multiquery(dataNeg, err, coordsNeg, csLocal)
        densityPos = dataPos[:,0]
        densityNeg = dataNeg[:,0]
        vsPos = dataPos[:,1]
        vsNeg = dataNeg[:,1]
        if (PYTHON_MAJOR_VERSION == 2):
            db.queryVals(["density", "vs", "vp"])
        else:
            db.setQueryValues(["density", "vs", "vp"])
        db.multiquery(data, err, cellCenters, csLocal)
        density = data[:,0]
        vs = data[:,1]
        vp = data[:,2]
        db.close()

        # Compute effective shear modulus.
        shearPos = densityPos*vsPos*vsPos
        shearNeg = densityNeg*vsNeg*vsNeg
        effShearModulus = 2.0*shearPos*shearNeg/(shearPos + shearNeg)
        
        # Loop over patches.
        for patchNum in range(numPatches):
            lineStart = patchNum*5
            lineEnd = lineStart + 5
            lineHead = lines[lineStart].strip()
            effShearModulusStr = '%.5e' % effShearModulus[patchNum]
            densityStr = '%.6f' % density[patchNum]
            vsStr = '%.6f' % vs[patchNum]
            vpStr = '%.6f' % vp[patchNum]
            lineHeadMod = lineHead + '  ' + effShearModulusStr + '  ' + densityStr + '  ' + vsStr + '  ' + vpStr + '\n'
            w.write(lineHeadMod)
            for lineNum in range(lineStart + 1, lineEnd):
                w.write(lines[lineNum])

        i.close()
        w.close()

        # Write VTK output files.
        self._writePointVTKFile(cellCenters, faultNum, effShearModulus, density, vs, vp)
        self._writePatchVTKFile(vertCoordsUnique, cellConnect, faultNum, effShearModulus, density, vs, vp)

        return


    def _getConnectivity(self, vertCoords, numPatches):
        """
        Get connectivity for fault mesh.
        """
        vertCoordsFlat = vertCoords.reshape((4*numPatches, 3))
        vertsUnique = np.unique(vertCoordsFlat, axis=0)
        connect = -1*np.ones((numPatches, 4), dtype=np.int64)
        tree = scipy.spatial.KDTree(vertsUnique)
        (dist, vertInds) = tree.query(vertCoordsFlat)
        connect = vertInds.reshape((numPatches, 4))

        return (vertsUnique, connect)


    def _writePatchVTKFile(self, coords, connect, faultNum, effShearModulus, density, vs, vp):
        """
        Write VTK output file with values over a patch.
        """

        numPoints = coords.shape[0]
        numCells = connect.shape[0]
        
        # Set up header info.
        vtkHead = "# vtk DataFile Version 2.0\n" + \
            "Sampled points\n" + \
            "ASCII\n" + \
            "DATASET UNSTRUCTURED_GRID\n" + \
            "POINTS %d double\n" % numPoints

        cellHead = "CELLS %d %d\n" % (numCells, 5*numCells)
        cells = 4*np.ones((numCells, 5), dtype=np.int64)
        cells[:,1:] = connect
        cellTypeHead = "CELL_TYPES %d\n" % numCells
        cellTypes = 9*np.ones(numCells, dtype=np.int64)

        # Write output file.
        v = open(self.vtkPatchOutputFile, 'w')
        v.write(vtkHead)
        np.savetxt(v, coords)
        v.write(cellHead)
        np.savetxt(v, cells, fmt='%d')
        v.write(cellTypeHead)
        np.savetxt(v, cellTypes, fmt='%d')
        v.write("CELL_DATA %d\n" % numCells)
        v.write("SCALARS fault_number int\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, faultNum, fmt='%d')
        v.write("SCALARS effective_shear_modulus float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, effShearModulus)
        v.write("SCALARS density float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, density)
        v.write("SCALARS vs float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, vs)
        v.write("SCALARS vp float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, vp)
        v.close()


    def _writePointVTKFile(self, coords, faultNum, effShearModulus, density, vs, vp):
        """
        Write VTK output file with values at sampled points.
        """

        numPoints = coords.shape[0]
        
        # Set up header info.
        vtkHead = "# vtk DataFile Version 2.0\n" + \
            "Sampled points\n" + \
            "ASCII\n" + \
            "DATASET UNSTRUCTURED_GRID\n" + \
            "POINTS %d double\n" % numPoints

        cellHead = "CELLS %d %d\n" % (numPoints, 2*numPoints)
        cells = np.ones((numPoints, 2), dtype=np.int32)
        cells[:,1] = np.arange(numPoints, dtype=np.int32)
        cellTypeHead = "CELL_TYPES %d\n" % numPoints
        cellTypes = np.ones(numPoints, dtype=np.int32)

        # Write output file.
        v = open(self.vtkPointOutputFile, 'w')
        v.write(vtkHead)
        np.savetxt(v, coords)
        v.write(cellHead)
        np.savetxt(v, cells, fmt='%d')
        v.write(cellTypeHead)
        np.savetxt(v, cellTypes, fmt='%d')
        v.write("POINT_DATA %d\n" % numPoints)
        v.write("SCALARS fault_number int\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, faultNum, fmt='%d')
        v.write("SCALARS effective_shear_modulus float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, effShearModulus)
        v.write("SCALARS density float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, density)
        v.write("SCALARS vs float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, vs)
        v.write("SCALARS vp float\n")
        v.write("LOOKUP_TABLE default\n")
        np.savetxt(v, vp)
        v.close()

        return
        
                
        
    def _getSampleCoords(self, lines, csLocal, csTDefnode):
        """
        Get sample coordinates for subsegment by sampling +/- normal distances to the fault.
        """
        # Get header line and make empty arrays.
        from spatialdata.geocoords.Converter import convert
        headline = lines[0].split()
        faultNum = int(headline[2])
        lons = np.zeros(4, dtype=np.float64)
        lats = np.zeros(4, dtype=np.float64)
        depths = np.zeros(4, dtype=np.float64)

        # Get geographic coordinates of corners.
        for vertNum in range(4):
            lineSplit = lines[vertNum + 1].split()
            lons[vertNum] = float(lineSplit[0])
            lats[vertNum] = float(lineSplit[1])
            depths[vertNum] = 1000.0*float(lineSplit[2])

        # Convert coordinates to local Cartesian system and compute normals.
        coords = np.column_stack((lons, lats, depths))
        convert(coords, csLocal, csTDefnode)
        v1a = coords[1,:] - coords[0,:]
        v2a = coords[3,:] - coords[0,:]
        v1b = coords[3,:] - coords[2,:]
        v2b = coords[1,:] - coords[2,:]
        normalA = np.cross(v1a, v2a)
        normalA /= np.linalg.norm(normalA)
        normalB = np.cross(v1b, v2b)
        normalB /= np.linalg.norm(normalB)
        normal = 0.5*(normalA + normalB)
        normal /= np.linalg.norm(normal)

        # Get cell center and distances on either side of patch.
        cellCenter = np.mean(coords, axis=0)
        coordsPos = (cellCenter + normal*self.faultNormalDist).reshape(1,3)
        coordsNeg = (cellCenter - normal*self.faultNormalDist).reshape(1,3)

        return(faultNum, coords, cellCenter, coordsPos, coordsNeg)
                
        
# ----------------------------------------------------------------------
if __name__ == '__main__':
    app = PytdefGetTdefMoment()
    app.run()

# End of file
